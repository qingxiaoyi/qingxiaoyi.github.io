<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>组件化--知识梳理</title>
      <link href="posts/468bb505/"/>
      <url>posts/468bb505/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ajax学习笔记</title>
      <link href="posts/d8771589/"/>
      <url>posts/d8771589/</url>
      
        <content type="html"><![CDATA[<h2 id="认识AJAX"><a href="#认识AJAX" class="headerlink" title="认识AJAX"></a>认识AJAX</h2><h3 id="ajax简介"><a href="#ajax简介" class="headerlink" title="ajax简介"></a>ajax简介</h3><p>AJAX全称为Asynchronous JavaScript And XML，就是异步的JS和XML。通过AJAX可以在浏览器中向服务器发送异步请求，最大的优势：<strong>无刷新获取数据</strong>。AJAX不是新的编程语言，而是一种将现有的标准组合在一起使用的新方式。</p><h3 id="AJAX的特点"><a href="#AJAX的特点" class="headerlink" title="AJAX的特点"></a>AJAX的特点</h3><h4 id="AJAX的优点"><a href="#AJAX的优点" class="headerlink" title="AJAX的优点"></a>AJAX的优点</h4><ol><li>可以无需刷新页面而与服务器进行通信。</li><li>允许你根据用户事件来更新部分页面内容。</li></ol><h4 id="AJAX的缺点"><a href="#AJAX的缺点" class="headerlink" title="AJAX的缺点"></a>AJAX的缺点</h4><ol><li><p>没有浏览历史，不能回退。</p></li><li><p>存在跨域的问题（同源）</p></li><li><p>SEO不友好</p></li></ol><h3 id="常见使用ajax网站"><a href="#常见使用ajax网站" class="headerlink" title="常见使用ajax网站"></a>常见使用ajax网站</h3><blockquote><p>百度的注册页面，输入已经注册的名字会返回false提示该名称已被使用。</p></blockquote><blockquote><p>ProcessOn网站，在线绘制图像。</p></blockquote><blockquote><p>今日头条下拉到底部会刷新出新的头条进行观看。</p></blockquote><blockquote><p>百度搜索时，输入几个字会有下拉框提示相关的关键字。</p></blockquote><blockquote><p>京东界面的二级菜单栏也是由ajax发送的数据。</p></blockquote><p>   ajax实际上是一种懒加载的模式。<em>懒加载</em>：用则加载，不用则不加载。</p><h2 id="了解HTTP协议"><a href="#了解HTTP协议" class="headerlink" title="了解HTTP协议"></a>了解HTTP协议</h2><h4 id="http"><a href="#http" class="headerlink" title="http"></a>http</h4><p>HTTP（hypertext transport protocol)协议，即超文本传输协议，协定详细规定了浏览和万维网服务器之间的通信规则。</p><h4 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h4><p>重点是格式与参数，结构都是相同的</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET /s?ie=utf-8 HTTP/1.1    行</span><br><span class="line"><span class="attribute">Host</span>: atguigu.com           头</span><br><span class="line"><span class="attribute">Cookie</span>: name=guigu          </span><br><span class="line"><span class="attribute">Content-type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">User-Agent</span>: chrom 83</span><br><span class="line">  空行</span><br><span class="line">username=admin&amp;password=admin        体</span><br></pre></td></tr></table></figure><h4 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> OK 行</span><br><span class="line"><span class="attribute">Content-Type</span>: text/html;charset=utf-8  头</span><br><span class="line"><span class="attribute">Contetn-Length</span>: 2048</span><br><span class="line"><span class="attribute">Content-Encoding</span>: gzip</span><br><span class="line">    空行</span><br><span class="line">&lt;html&gt;体</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;I am the Bone of my Sword&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="XML简介"><a href="#XML简介" class="headerlink" title="XML简介"></a>XML简介</h4><p>XML即可扩展标记语言。XML被设计用来传输和存储数据。XML和HTML类似，不同的是HTML中都是预定义标签，而XML中没有预定义标签，全都是自定义标签，用来表示一些数据。</p><p>​    比如我又一个学生数据：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name:&#x27;孙悟空&#x27;,</span><br><span class="line">age:18,</span><br><span class="line">gender=&#x27;男&#x27;;</span><br></pre></td></tr></table></figure><p>用XML表示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>孙悟空<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">gender</span>&gt;</span>男<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不过现在已经被JSON取代：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">name:&#x27;孙悟空&#x27;,</span><br><span class="line">age:18,</span><br><span class="line">gender=&#x27;男&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="服务器搭建"><a href="#服务器搭建" class="headerlink" title="服务器搭建"></a>服务器搭建</h2><h3 id="express"><a href="#express" class="headerlink" title="express"></a>express</h3><p>因为ajax需要给服务端发送请求，而express正好可以搭建一个服务端，以便后续ajax请求的发送和接收。</p><p>express是基于node.js的，所以要安装好node.js，再执行以下操作。</p><h4 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h4><p>在VScode下打开终端，在终端中输入命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm init --yes    &#x2F;&#x2F;用于初始化</span><br><span class="line">npm i express&#x2F;&#x2F;安装express</span><br></pre></td></tr></table></figure><p>执行完后再js文件中编写express服务机代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">//创建应用对象</span></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="comment">//创建路由规则</span></span><br><span class="line"><span class="comment">//request是对请求报文的封装</span></span><br><span class="line"><span class="comment">//response是对响应报文的封装</span></span><br><span class="line">app.get(<span class="string">&#x27;/server&#x27;</span>,<span class="function">(<span class="params">request,response</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//设置响应头 设置允许跨域</span></span><br><span class="line">    response.setHeader(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>,<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    <span class="comment">//设置响应体</span></span><br><span class="line">    response.send(<span class="string">&#x27;HELLO EXPRESS&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.post(<span class="string">&#x27;/server&#x27;</span>,<span class="function">(<span class="params">request,response</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//设置响应头 设置允许跨域</span></span><br><span class="line">    response.setHeader(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>,<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    <span class="comment">//设置响应体</span></span><br><span class="line">    response.send(<span class="string">&#x27;HELLO AJAX POST&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//监听端口启动服务</span></span><br><span class="line">app.listen(<span class="number">8360</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;服务已经启动，8360端口监听中。。。&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在终端执行node xxx.js开启服务器，服务则会在设定的端口下启动，可以在浏览器中输入127.0.0.1:8360/server访问到。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node server.js&#x2F;&#x2F;开启服务器</span><br></pre></td></tr></table></figure><h3 id="nodemon"><a href="#nodemon" class="headerlink" title="nodemon"></a>nodemon</h3><p>express每次修改js文件都需要关闭服务，保存，然后再次启动。如果调试频繁，来回重启很麻烦，所以使用nodemon包：这个包可以监测文件变化，并自动保存重启。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>同样是需要node的npm环境，在终端命令行输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g nodemon</span><br></pre></td></tr></table></figure><p>服务器的启动也不再用node xxx.js，使用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nodemon server.js</span><br></pre></td></tr></table></figure><p>这时运行的服务器再次访问，修改内容无需重启服务器，内容也能改变。</p><h2 id="Ajax的使用"><a href="#Ajax的使用" class="headerlink" title="Ajax的使用"></a>Ajax的使用</h2><h3 id="原生AJAX"><a href="#原生AJAX" class="headerlink" title="原生AJAX"></a>原生AJAX</h3><p>原生ajax的使用依赖于<span style="color:red">XMLHttpReques</span>对象。话不多说，直接上代码，一看就懂。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建对象</span></span><br><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"><span class="comment">//2.初始化，设置请求方法和url</span></span><br><span class="line">xhr.open(<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;http://127.0.0.1:8360/server&#x27;</span>);</span><br><span class="line"><span class="comment">//3.发送请求</span></span><br><span class="line">xhr.send();</span><br><span class="line"><span class="comment">//4.事件绑定，处理服务端返回的结果</span></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//readyState是xhr对象中的属性，表示状态0 1 2 3 4 </span></span><br><span class="line">    <span class="comment">//等于4表示服务端返回了所有的结果</span></span><br><span class="line"><span class="keyword">if</span>(xhr.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">        <span class="comment">//判断响应状态码，2开头都表示成功</span></span><br><span class="line"><span class="keyword">if</span>(xhr.status&gt;=<span class="number">200</span> &amp;&amp; xhr.status&lt;<span class="number">300</span>)&#123;</span><br><span class="line">            <span class="comment">//处理响应结果</span></span><br><span class="line"><span class="built_in">console</span>.log(xhr.status);<span class="comment">//状态码</span></span><br><span class="line"><span class="built_in">console</span>.log(xhr.statusText);<span class="comment">//响应状态字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(xhr.getAllResponseHeaders);<span class="comment">//响应头（所有的）</span></span><br><span class="line"><span class="built_in">console</span>.log(xhr.response);<span class="comment">//响应体</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>open()方法中第一个参数写GET就是GET请求，写POST就是POST请求，也可以写ALL。</p><p>send()方法中可以设置请求体，内容可以任意设置，但还是要根据需求来。</p><h4 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h4><p>在URL末尾添加一个问号，以&amp;隔开不同的参数，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:8360&#x2F;server?user&#x3D;admin&amp;password&#x3D;admin</span><br></pre></td></tr></table></figure><h4 id="设置请求头"><a href="#设置请求头" class="headerlink" title="设置请求头"></a>设置请求头</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.setRequestHeader(&#39;Content-Type&#39;,&#39;application&#x2F;x-www-form-urlencoded&#39;)</span><br></pre></td></tr></table></figure><p>上面这个内容不用管，这个方法设置后能够传入一个请求头，两个参数分别是请求头的名称和内容。一般可以把身份信息校验放到头部信息，当然这个也可以任意设置，但还是按需求来。</p><h4 id="服务端响应JSON数据"><a href="#服务端响应JSON数据" class="headerlink" title="服务端响应JSON数据"></a>服务端响应JSON数据</h4><p>无非是服务端返回的数据换成JOSN数据，服务端将JSON数据序列化成字符串，再返回给客户端。response.send(jsonStr)。客户端接收到之后再对数据进行处理。代码如下：</p><p>服务端的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line">app.all(<span class="string">&#x27;/json-server&#x27;</span>,<span class="function">(<span class="params">request,response</span>)=&gt;</span>&#123;</span><br><span class="line">    response.setHeader(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>,<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    response.setHeader(<span class="string">&#x27;Access-Control-Allow-Header&#x27;</span>,<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> data = &#123;</span><br><span class="line">        name:<span class="string">&#x27;孙悟空&#x27;</span>,</span><br><span class="line">        age:<span class="number">18</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> str = <span class="built_in">JSON</span>.stringify(data);<span class="comment">//将JOSN序列化</span></span><br><span class="line">    response.send(str);<span class="comment">//响应给客户端</span></span><br><span class="line">&#125;);</span><br><span class="line">app.listen(<span class="number">8360</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;服务已经启动，8360端口监听中。。。&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>客户端接收并处理：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;result&#x27;</span>);</span><br><span class="line">result.addEventListener(<span class="string">&#x27;mouseover&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;http://127.0.0.1:8360/json-server&#x27;</span>);</span><br><span class="line"><span class="comment">//如果没有下面这一行，就需要自己反序列化数据</span></span><br><span class="line">xhr.reponseType = <span class="string">&#x27;json&#x27;</span>;</span><br><span class="line">xhr.send();</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(xhr.readyState === <span class="number">4</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(xhr.status&gt;=<span class="number">200</span> &amp;&amp; xhr.status&lt;<span class="number">300</span>)&#123;</span><br><span class="line"><span class="comment">//let data = JSON.parse(xhr.response)</span></span><br><span class="line"><span class="built_in">console</span>.log(xhr.response);<span class="comment">//不出意外会得到服务器创建的对象</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="IE缓存机制"><a href="#IE缓存机制" class="headerlink" title="IE缓存机制"></a>IE缓存机制</h4><p>IE浏览器会对ajax请求结果做一个缓存，再去发送请求的时候走的就是本地的缓存，而不是服务器的响应。</p><p><strong>解决方式</strong></p><p>在请求链接中传入一个参数，使每时每刻的参数不相同，IE就会认为是不同的请求，就不会走缓存，每一次都会重新发送请求。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.open(<span class="string">&quot;get&quot;</span>,<span class="string">&#x27;http://127.0.0.1:8360/ie-server?ie=&#x27;</span>+<span class="built_in">Date</span>.now());</span><br></pre></td></tr></table></figure><p>但是这个做法在实际中是不会用的。</p><h4 id="请求超时和网络异常处理"><a href="#请求超时和网络异常处理" class="headerlink" title="请求超时和网络异常处理"></a>请求超时和网络异常处理</h4><p>程序运行中时常会有网络超时的情况，服务端不能保证及时快速的反应，所以在请求超时和网络异常的时候给用户提醒，增加产品的体验。</p><p>此类问题可以调用XMLHttpRequest包的方法onerror()和ontimeout()来解决：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;http://127.0.0.1:8360/error-server&#x27;</span>);</span><br><span class="line"><span class="comment">//超时设置2s</span></span><br><span class="line">xhr.timeout = <span class="number">2000</span>;</span><br><span class="line"><span class="comment">//超时回调</span></span><br><span class="line">xhr.ontimeout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;网络异常，请稍后重试！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//网络异常回调</span></span><br><span class="line">xhr.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;你的网络似乎出现了一些问题！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">xhr.send();</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(xhr.readyState === <span class="number">4</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(xhr.status&gt;=<span class="number">200</span> &amp;&amp; xhr.status&lt;<span class="number">300</span>)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(xhr.response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="取消请求"><a href="#取消请求" class="headerlink" title="取消请求"></a>取消请求</h4><p>请求过程中，在请求发送之后，但是在接收到响应之前，可以通过代码将请求取消掉。</p><p>取消请求使用abord()方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.abord();</span><br></pre></td></tr></table></figure><h4 id="请求重复发送"><a href="#请求重复发送" class="headerlink" title="请求重复发送"></a>请求重复发送</h4><p>有时服务器响应较慢，用户频繁点击发送请求，让服务器接收到很多个重复的请求，服务器压力增大。这个问题可以设置用户重复点击会关闭上一个请求，重新发送一个新的请求。</p><p>代码实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> xhr = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//标识是否放松ajax请求</span></span><br><span class="line"><span class="keyword">let</span> isSending = <span class="literal">false</span>;</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(isSending) xhr.abord();</span><br><span class="line">     xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">     <span class="comment">//修改标识变量的值</span></span><br><span class="line">     isSending = <span class="literal">true</span>;</span><br><span class="line">     xhr.open(<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;http://127.0.0.1:8360/delay&#x27;</span>);</span><br><span class="line">     xhr.send();</span><br><span class="line">     xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="keyword">if</span>(xhr.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">          <span class="comment">//标识修改变量</span></span><br><span class="line">          isSending = <span class="literal">false</span>;</span><br><span class="line">          &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="jQuery封装的AJAX"><a href="#jQuery封装的AJAX" class="headerlink" title="jQuery封装的AJAX"></a>jQuery封装的AJAX</h3><p>除了原生的ajax，jQuery也封装了ajax，格式是这样的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$.get(url,[data],[callback],[type]);</span><br><span class="line"><span class="comment">//这里get可以使用post，就是指get请求和post请求</span></span><br><span class="line"><span class="comment">//url：请求的url地址</span></span><br><span class="line"><span class="comment">//data：请求携带的参数</span></span><br><span class="line"><span class="comment">//callback：载入成功时的回调函数</span></span><br><span class="line"><span class="comment">//type：设置返回内容格式，有html、xml、script、json、text、default</span></span><br></pre></td></tr></table></figure><p>看一个实例就差不多了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;button&#x27;</span>).eq(<span class="number">0</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     $.get(<span class="comment">//请求方式</span></span><br><span class="line">     <span class="string">&#x27;http://127.0.0.1:8360/jquery-server&#x27;</span>,<span class="comment">//请求地址</span></span><br><span class="line">     &#123;<span class="attr">admin</span>:admin,<span class="attr">passwrod</span>:admin&#125;,<span class="comment">//传入的参数</span></span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;<span class="comment">//回调函数，这里参数data即响应体</span></span><br><span class="line">          <span class="built_in">console</span>.log(data);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;json&#x27;</span>);<span class="comment">//返回内容格式</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="通用方法"><a href="#通用方法" class="headerlink" title="通用方法"></a>通用方法</h4><p>使用ajax()方法发送请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    <span class="comment">//url地址</span></span><br><span class="line">    url:<span class="string">&#x27;http://127.0.0.1/8360/jquery-server&#x27;</span>,</span><br><span class="line">    <span class="comment">//传递的参数</span></span><br><span class="line">    data:&#123;<span class="attr">admin</span>:admin,<span class="attr">password</span>:admin&#125;,</span><br><span class="line">    <span class="comment">//请求类型</span></span><br><span class="line">    type:<span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="comment">//返回数据类型</span></span><br><span class="line">    dataType:<span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">    <span class="comment">//成功时的回调函数</span></span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//超时时间</span></span><br><span class="line">    timeout:<span class="number">2000</span>,</span><br><span class="line">    <span class="comment">//失败的回调</span></span><br><span class="line">    error: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;出错了&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//头信息</span></span><br><span class="line">    headers:&#123;</span><br><span class="line">        a:<span class="number">400</span>,</span><br><span class="line">        b:<span class="number">600</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这里只列举了一部分，更多的可以查<a href="https://jquery.cuishifeng.cn/">jQuery文档</a></p><h3 id="Axios的AJAX"><a href="#Axios的AJAX" class="headerlink" title="Axios的AJAX"></a>Axios的AJAX</h3><p>axios是目前前端最热门的ajax工具库，使用频率很高，vue和react强烈推荐。</p><p><strong>特点：</strong></p><ol><li>支持浏览器和node.js</li><li>支持promise</li><li>能拦截请求和响应</li><li>能转换请求和响应数据</li><li>能取消请求</li><li>自动转换JSON数据</li><li>浏览器端支持防止CSRF（跨站请求伪造）</li></ol><h4 id="使用axios"><a href="#使用axios" class="headerlink" title="使用axios"></a>使用axios</h4><p>使用可以在页面中链入axios的CDN链接</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/axios/0.21.0/axios.min.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><h3 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h3><p>同源策略（Same-Origin Policy）是最早由Netscape公司提出，是浏览器的一种安全策略。</p><p>同源：当前网页和ajax请求的目标资源之间的url，两者之间的协议、域名、端口号必须完全相同。</p><p>注：ajax是默认遵循同源策略的，而违背同源策略无法发送ajax，称为跨域。</p><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><p>JSONP（JSON with Padding），是一个非官方的跨域解决方案，纯粹凭借程序员的聪明才智开发出来，只支持get请求。 </p><h4 id="JSONP工作原理"><a href="#JSONP工作原理" class="headerlink" title="JSONP工作原理"></a>JSONP工作原理</h4><p>在网页有一些标签天生具有跨域的能力，比如：img、link、iframe、script。JSONP就是利用script标签的跨域能力来发送请求的，</p><h4 id="JSONP的使用"><a href="#JSONP的使用" class="headerlink" title="JSONP的使用"></a>JSONP的使用</h4><p>好麻烦，懒得搞 O(∩_∩)O</p><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>CORS(Cross Origin Resourse Sharing)，跨域资源共享。CORS是官方的的跨域解决方法，它的特点是不需要在客户端做任何特殊的操作，完全在服务器中进行处理，支持get和post请求。跨域资源共享标准新增了一组HTTP首部字段，允许服务器声明哪些源站通过浏览器有权限访问哪些资源。</p><h4 id="CORS工作原理"><a href="#CORS工作原理" class="headerlink" title="CORS工作原理"></a>CORS工作原理</h4><p>CORS是通过设置一个响应头来告诉浏览器，该请求允许跨域，浏览器收到该响应以后就会对响应放行。</p><h4 id="CORS的使用"><a href="#CORS的使用" class="headerlink" title="CORS的使用"></a>CORS的使用</h4><p>在服务器端进行设置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">response.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>,<span class="string">&quot;*&quot;</span>)</span><br><span class="line"><span class="comment">//这里的*可以替换为具体的域名表示对单个域名设置跨域允许</span></span><br><span class="line">response.setHeader(<span class="string">&quot;&quot;</span>Access-Control-Allow-Origin<span class="string">&quot;,&quot;</span>http:<span class="comment">//127.0.0.1:/cors-server&quot;)</span></span><br></pre></td></tr></table></figure><p>更多的相关属性设置可以查看<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS">这个文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础（一）：了解Java</title>
      <link href="posts/9de44957/"/>
      <url>posts/9de44957/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是Java"><a href="#什么是Java" class="headerlink" title="什么是Java"></a>什么是Java</h1><p>  Java是一门面向对象编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++里难以理解的多继承、指针等概念，因此Java语言具有功能强大和简单易用两个特征。Java语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程。</p><p>Java具有简单性、面向对象、分布式、健壮性、安全性、平台独立与可移植性、多线程、动态性等特点。Java可以编写桌面应用程序、Web应用程序、分布式系统和嵌入式系统应用程序等。</p><p>Java有一次编写，到处运行的特点。Java代码可以在Windows、Unix和iOS系统上运行。</p><h1 id="Java的版本"><a href="#Java的版本" class="headerlink" title="Java的版本"></a>Java的版本</h1><p>Java发展至今，按照应用范围划分为三个版本：Java SE、Java EE、Java ME。</p><h3 id="Java-SE："><a href="#Java-SE：" class="headerlink" title="Java SE："></a>Java SE：</h3><p>Java SE是Java的标准版本，主要应用于桌面应用程序的开发，同时也是Java的基础，包含Java语言基础、JDBC操作、I/O、网络通信、多线程技术等。</p><h3 id="Java-EE："><a href="#Java-EE：" class="headerlink" title="Java EE："></a>Java EE：</h3><p>Java EE是Java的企业版，主要用于开发企业级分布式的网络程序，如电子商务和ERP（企业资源规划）系统，其核心为EJB（企业Java组件模型）。但是Java EE包含了Java SE，在Java EE中可以调用Java SE的相关内容。淘宝网、京东网等都是有Java EE编写成的。</p><h3 id="Java-ME："><a href="#Java-ME：" class="headerlink" title="Java ME："></a>Java ME：</h3><p>Java ME主要应用于嵌入式开发，如掌上电脑、手机等移动柜通信电子设备。如今的移动设备大部分都是Android和IOS，所以这种逐渐被淘汰了。</p><h1 id="Java运行流程"><a href="#Java运行流程" class="headerlink" title="Java运行流程"></a>Java运行流程</h1><p>Java源程序（.java文件）——&gt;Java编译器（jdk）——&gt;java字节码文件（.class文件）——&gt;由解释执行器（java.exe）将字节码文件加载到java虚拟机（jvm）——&gt;字节码文件（.class）就会在java虚拟机中执行。<br><img src="https://img.php.cn/upload/image/345/862/386/1533107703567196.png" alt="Java运行流程图" loading="lazy"></p><h1 id="Java-API"><a href="#Java-API" class="headerlink" title="Java API"></a>Java API</h1><p>API的全称是Application Programming Interface,即应用程序编程接口，主要包括类的继承结构、成员变量、成员方法、构造方法、静态成员的描述信息和详细说明等内容。</p><blockquote><p>Java API可以直接在oracle官网在线查看：<a href="https://docs.oracle.com/javase/8/docs/api/index.html">https://docs.oracle.com/javase/8/docs/api/index.html</a></p></blockquote><h1 id="Windows搭建Java环境"><a href="#Windows搭建Java环境" class="headerlink" title="Windows搭建Java环境"></a>Windows搭建Java环境</h1><blockquote><p>首先下载去<a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html">oracle官网</a>下载jdk。下载好后点击安装，可以自定义安装路径，但是使用默认路径是最稳定的(c:/Programs/java)。安装jdk后继续点击下一步安装jre。</p></blockquote><blockquote><p>jdk和jre都安装好配置环境变量。此电脑-&gt;属性-&gt;高级系统设置-&gt;环境变量。在系统变量中找到Path，新建一个jdk的bin文件夹路径(就是刚刚的安装路径下的bin)。安装到这里后就可以在命令提示符中输入java -version就可以查看java版本了。</p></blockquote><blockquote><p>然后到<a href="https://www.eclipse.org/downloads/packages/">eclipse官网</a>下载eclipse，我下的那个<em>Eclipse IDE for Java Developers</em>。这里下载后是一个压缩包，下载完成后直接解压就可以使用。</p></blockquote><p><font color="red">注：没搭建好Java环境会无法使用eclipse<font></font></font></p>]]></content>
      
      
      <categories>
          
          <category> Java SE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python编写简易爬虫</title>
      <link href="posts/9da3cbbc/"/>
      <url>posts/9da3cbbc/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是爬虫？"><a href="#什么是爬虫？" class="headerlink" title="什么是爬虫？"></a>什么是爬虫？</h2><p>网络爬虫（web crawler），其实就是一种脚本，能够按照一定的规则自动的抓取万维网上的信息。</p><h2 id="爬虫的思路"><a href="#爬虫的思路" class="headerlink" title="爬虫的思路"></a>爬虫的思路</h2><p>先输入一个网址，浏览器拿到网址后通过域名解析出IP后（http服务）发送给服务器一个请求；服务器会根据请求做相应处理后在返回给浏览器（响应）；浏览器收到响应后会对收到的内容解析、渲染，在展示给用户。而爬虫就是用程序模拟浏览器发送http请求，通过url进行一系列的信息数据等资源的抓取。</p><h2 id="爬虫流程"><a href="#爬虫流程" class="headerlink" title="爬虫流程"></a>爬虫流程</h2><blockquote><p>目标数据  </p></blockquote><p>-网站<br>-页面  </p><blockquote><p>分析数据加载流程</p></blockquote><p>-分析目标数据所对应的url  </p><blockquote><p>下载数据  </p></blockquote><blockquote><p>清洗处理数据  </p></blockquote><blockquote><p>数据持久化  </p></blockquote><p> 清楚原理后开始爬虫！这次爬虫的目标是<a href="http://www.xbiqugew.com/">笔趣阁</a>上的辰东的《圣墟》  </p><h2 id="开始爬虫"><a href="#开始爬虫" class="headerlink" title="开始爬虫"></a>开始爬虫</h2><blockquote><p>首先导入爬虫所需要的库  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import re</span><br></pre></td></tr></table></figure><p>requests:爬虫需要请求http模块，可以方便进行数据爬取<br>re:re是正则表达式的库，可以更精确指定抓取数据的位置</p><blockquote><p>下载一个页面  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url &#x3D; &#39;http:&#x2F;&#x2F;www.xbiqugew.com&#x2F;book&#x2F;18725&#x2F;&#39;</span><br></pre></td></tr></table></figure><blockquote><p>模拟浏览器发送http请求  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">response &#x3D; requests.get(url)</span><br><span class="line">response.encoding &#x3D;&#39;gbk&#39;</span><br></pre></td></tr></table></figure><p>此处html的字符集我试了很多个种字符集都是乱码，最后找到一个诀窍，直接到html代码里找到头部(head)，一般前面几行就会写出这个html的字符集。这个html的字符集为gbk  </p><p><img src="https://i.loli.net/2020/01/15/EW13N2wRf6n7SPc.jpg" alt="html中查看字符集" loading="lazy"> </p><blockquote><p>网页源码</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">html &#x3D; response.text</span><br></pre></td></tr></table></figure><blockquote><p>获取小说标题</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">title &#x3D; re.findall(r&#39;&lt;meta property&#x3D;&quot;og:title&quot; content&#x3D;&quot;(.*?)&quot;&gt;&#39;,html)</span><br></pre></td></tr></table></figure><p>这里的小说标题就是用爬虫抓取出来的数据了。  </p><p>  从html网页源码中找到需要抓取内容周围具有唯一性的代码段，将需要抓取的内容删除，使用(.*?)来代替，这里的括号里点星问就是需要抓取的内容。  </p><blockquote><p>获取每一章节的信息（章节，url）  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dl &#x3D; re.findall(r&#39;&lt;dt&gt;《圣墟》正文&lt;&#x2F;dt&gt;.*?&lt;&#x2F;dl&gt;&#39;,html,re.S)[0]</span><br><span class="line">chapter_info_list &#x3D; re.findall(r&#39;&lt;dd&gt;&lt;a href&#x3D;&quot;(.*?)&quot;&gt;(.*?)&lt;&#x2F;a&gt;&lt;&#x2F;dd&gt;&#39;,dl)</span><br></pre></td></tr></table></figure><p>和上面获取小说标题信息一样，知识抓取内容更多更杂乱一点，不过都是通过re.findall()和(.*?)来抓取内容。  </p><blockquote><p>循环每一个章节，分别去下载  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for chapter_info in chapter_info_list:</span><br><span class="line">    chapter_url,chapter_title &#x3D; chapter_info</span><br><span class="line">    chapter_url &#x3D; &quot;http:&#x2F;&#x2F;www.xbiqugew.com&quot; + chapter_url</span><br><span class="line">    </span><br><span class="line">    chapter_response &#x3D; requests.get(chapter_url)</span><br><span class="line">    chapter_response.encoding&#x3D;&#39;gbk&#39;</span><br><span class="line">    chapter_html&#x3D;chapter_response.text</span><br></pre></td></tr></table></figure><p>通过for循环下载每一章小说的内容，这里的代码也只是重复之前的过程：获取网页、抓取网页中需要的内容，这里再用一个循环循环每一章节，将每章小说抓取下来。</p><blockquote><p>清洗数据  </p></blockquote><p>这里抓取出来的小说还有很多杂乱的、我们不想要的数据在里面，比如：很多空格，html中的空格代码 &amp;nbsp 和换行标签 &lt; /br&gt;等等。可以使用replace置换。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">chapter_content &#x3D; chapter_content.replace(&#39; &#39;,&#39;&#39;)</span><br><span class="line">chapter_content &#x3D; chapter_content.replace(&#39;&amp;nbsp&#39;,&#39;&#39;)</span><br><span class="line">chapter_content &#x3D; chapter_content.replace(&#39;&lt;br&#x2F;&gt;&#39;,&#39;&#39;)</span><br><span class="line">&#96;&#96;&#x2F;</span><br><span class="line">这里我也出了一个问题：我在之前的chpter_content是list格式，但是list无法使用replace，最开始用join还是报错，最后直接使用str()转换成字符串。  </span><br><span class="line"></span><br><span class="line">&gt;数据持久化储存</span><br></pre></td></tr></table></figure><p>fp = open(‘%s.txt’%title,’w’,encoding=’utf-8’<br>fp.write(chapter_title)<br>fp.write(chapter_content)<br>fp.write(‘\n’)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">将抓取的小说存储到txt文档中</span><br><span class="line"></span><br><span class="line">最后给大家看看我抓的小说  </span><br><span class="line"></span><br><span class="line">![乱七八槽的小说](https:&#x2F;&#x2F;i.loli.net&#x2F;2020&#x2F;01&#x2F;15&#x2F;F3pDyA98XoV1tne.jpg)  </span><br><span class="line">当然我这个也还需要改进。源码今天看已经找不到了，后面再补上。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 其它 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>about</title>
      <link href="about/index-1.html"/>
      <url>about/index-1.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="about/index.html"/>
      <url>about/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="about-me"><a href="#about-me" class="headerlink" title="about me"></a>about me</h2><p>我是一名前端小白，目标是成为前端工程师，月入上万那种(#^.^#)。</p><h2 id="interest"><a href="#interest" class="headerlink" title="interest"></a>interest</h2><h4 id="健身"><a href="#健身" class="headerlink" title="健身"></a>健身</h4><p>最爱和朋友们一起夜跑，跑到大汗淋漓；最想有八块腹肌（努力实现中）</p><h4 id="书法"><a href="#书法" class="headerlink" title="书法"></a>书法</h4><p>提笔就想写字，尽管写得不咋地但就是想写；大爱颜体和廋金体。</p><h4 id="单机游戏"><a href="#单机游戏" class="headerlink" title="单机游戏"></a>单机游戏</h4><p>古剑奇谭系列；奥日与黑暗森林、奥日与萤火意志；绝代双骄系列；小小噩梦；泰拉瑞亚……</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="about/site.html"/>
      <url>about/site.html</url>
      
        <content type="html"><![CDATA[{data:{[name:lilili,number:1,sex:1],[name:lalala,number:2,sex:0]},function{#el:'helloword'}}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="albums/index.html"/>
      <url>albums/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>夕阳</title>
      <link href="albums/sunset.html"/>
      <url>albums/sunset.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>英魂</title>
      <link href="albums/yinghun.html"/>
      <url>albums/yinghun.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="categories/index.html"/>
      <url>categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="tags/index.html"/>
      <url>tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
